/*
Design a class Company which has list of employees,Company class will have control over employees thorugh CRUD operations.

Company class will implements ICompanyServiceProvider interface and override the methods for CRUD operations 

We also have USer defined execptions :-EmployeeNotFoundException , DuplicateEmployeeIDException
*/

// Solution 
public class Employee {
  private int employeeId;
  private Sring employeeName;
  private double employeeSalary;

	public Employee(int employeeId String emplyeeName, double employeeSalary) {
	 super();
	this.employeeId = employeeId;
	this.emplyeeName=emplyeeName;
	this.employeeSalary=employeeSalary;
	}


	public String getEmployeeName() {
		return employeeName;
	}


	public void setEmployeeName() {
		this.employeeName=employeeName;
	}

	public void setEmployeeSalary() {
		this.employeeSalary=employeeSalary;
	}

	public void setEmployeeSalary() {
		this.employeeSalary=employeeSalary;
	}

	public void setEmployeeId() {
		this.employeeId=employeeId;
	}

	public void setEmployeeId() {
		this.employeeId=employeeId;
	}


 	@Override
	public String toString() {
		return "Employee [employeeName=" + employeeName + ", employeeSalary=" + employeeSalary + ", employeeId=" + employeeId + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result=1;
		result = primate * result + employeeId;
		return result;
	}

	@Override 
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null) 
			return false;
		
		if (getClass() != obj.getClass()) 
			return false;
		Employee other = (Employee) obj;
		if (employeeId != other.employeeId)
			return false;
		return true;
	}

}

// User defined exceptions

public class EmployeeNotFoundException extends Exception{
  private String errorMessage;
	public EmployeeNotFoundException(String errorMessage) {
		this.errorMessage=errorMessage;
	}
	
	public String getErrorMessage() {
		return errorMessage;
	}
}

public class DuplicateEmployeeIDException extends Exception{
	final String ERRORMESSAGE="Duplicate Employee Id, Consider new Id";

	public String getErrorMessage() {
		return ERRORMESSAGE;
	}
}


// interface for CRUD operation
public interface ICompanyServiceProvider{

  public boolean createEmployee(Employee obj) throws DuplicateEmployeeIDException;
  public Employee readEmployee(int employ tId) throws  EmployeeNotFoundException; 
  public boolean  updateEmployee(int employeeId,double newSalary) throws        EmployeeNotFoundException;
  public bolean deleteEmployee(int employeeId) throws  EmployeeNotFoundException;

}

class Company implements ICompanyServiceProvider{
   private int companyId;
   private String companyname
   private String companyEmailId;
   private ArrayList<Employee> emplist;// has-A relation ship 

  @Overide 
  public Company(int companyId, String companyName, String companyEmailId) {
	this.companyId=companyId;
	this.companyName=companyName;
	this.companyEmailId=companyEmailId;
	this.empList=new ArrayList<Employee>();
  }
   

	public int getCompanyId() {
		return companyId;
	}

	public void setCompanyId(int companyId) {
		this.companyId=companyId;
	}

	public int getCompanyName() {
		return companyName;
	}

	public void setCompanyName(String companyName) {
		this.companyName=companyName;
	}

	public String getCompanyEmailId() {
		return companyEmailId;
	}

	public void setCompanyEmailId(String companyEmailId) {
		this.companyEmailId=companyEmailId;
	}

	public void setEmpList(ArrayList<Employee> empList) {
		this.empList=empList;
	}

	public void getEmpList() {
		return empList;
	}

	@Override
	public String toString() {
		return "Company [companyId=" + companyId + "companyName=" + companyName + ", companyEmailId=" + companyEmailId + ", empList=" + empList + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result=1;
		result = primate * result + companyId;
		return result;
	}

	@Override 
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null) 
			return false;
		
		if (getClass() != obj.getClass()) 
			return false;
		Company other = (Company) obj;
		if (companyId != other.companyId)
			return false;
		return true;
	}


  @Override
  public boolean createEmployee(Employee empobj) throws DuplicateEmployeeIDException{
    
	Employee emp=null;
	try {
		emp=readEmployee(empobj.getEmployeeId());
		if (emp != null)
			throw new DuplicateEmployeeIdException();
	} catch(EmployeeNotFoundException e) {
		empList.add(empobj);
	} catch (Exception e) {
		e.printStackTrace();
	}
	return false;
  }
  @Override
  public Employee readEmployee(int pemployeeId) throws  EmployeeNotFoundException{
            for (Employee emp: empList){
      	         if (emp.getEmployeeId() == pemployeeId)
          		 return emp;
	}
      
	throw  new EmployeeNotFoundException("Employee is not found ");
  }
  @Override
  public boolean updateEmployee(int employeeId,double newSalary) throws                         EmployeeNotFoundException {
    
              for (Employee emp: empList){
      	         if (emp.getEmployeeId() == pemployeeId) {
		emp.setEmployeeSalary(newSalary)
          		 return true;
		}
	}
      
	throw  new EmployeeNotFoundException("Employee is not found ");

  }
  @Override
  public bolean deleteEmployee(int employeeId) throws  EmployeeNotFoundException{
	int i=-1;
              for (Employee emp: empList){
	i++;
      	         if (emp.getEmployeeId() == pemployeeId) {
		empList.remove(i)
          		 return true;
		}
	}
	throw  new EmployeeNotFoundException("Employee is not found "); 
  }

}


//  main method 

class exericise13{
   public static void main(string args[]){
   try{
        // create objects for Employee 
        // create object for  Company 
        // call the CRUD methods using comapny object   
       }
       catch(EmployeeNotFoundException ENF){
         ...
       }
       catch(DuplicateEmployeeIDException DEID){
          ...
       }
       catch(Exception ex){
         ...		
       }
       finally{
          list.clear();
       }
}
   




